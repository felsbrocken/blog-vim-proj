
"set lines=60 columns=220            " 设置行、列
"
colorscheme desertEx_256

"{{{标尺相关
"set cursorcolumn                    " 高亮显示列
set textwidth=80                    " 插入文本的最大宽度
set scrolloff=15                    " 光标上下两侧最少保留的屏幕行数
set cc=+1                           " 是否显示标尺
hi ColorColumn ctermfg=White ctermbg=Grey   " 标尺颜色
"}}}

"{{{
let g:startify_bookmarks            = [
            \ '~/Code/blog/startify/1.txt',
            \ '~/Code/blog/startify/2.txt',
            \]

let g:startify_files_number = 2
let g:startify_skiplist = [
       \ '\.vimgolf',
       \ '^/tmp',
       \ '/project/.*/documentation',
       \ ]

let g:startify_custom_header = [
            \ '+------------------------------+',
            \ '|  Welcome to my blog.         |',
            \ '|                              |',
            \ '|  http://hackers-delight.com/ |',
            \ '+----------------+-------------+',
            \]

let g:startify_custom_footer = [
            \ '+------------------------------+',
            \ '|  1.01 ^ 365 =  37.78         |',
            \ '+----------------+-------------+',
            \]
"}}}
"{{{
" rainbow 对于不同的括号，渲染成不同颜色
let g:rainbow_active = 1
let g:rainbow_operators=2
let g:rainbow_conf = {
            \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
            \   'ctermfgs': ['lightgray', 'lightblue', 'lightmagenta', 'lightcyan'],
            \   'operators': '_,_',
            \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
            \   'separately': {
            \       '*': {},
            \       'lisp': {
            \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
            \           'ctermfgs': ['darkgray', 'darkblue', 'darkmagenta', 'darkcyan', 'darkred', 'darkgreen'],
            \       },
            \       'vim': {
            \           'parentheses': [['fu\w* \s*.*)','endfu\w*'], ['for','endfor'], ['while', 'endwhile'], ['if','_elseif\|else_','endif'], ['(',')'], ['\[','\]'], ['{','}']],
            \       },
            \       'tex': {
            \           'parentheses': [['(',')'], ['\[','\]'], ['\\begin{.*}','\\end{.*}']],
            \       },
            \       'css': 0,
            \       'stylus': 0,
            \   }
            \}
"}}}
"{{{ 新文件标题
"新建.c,.h,.sh,.java文件，自动插入文件头
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()"
""定义函数SetTitle，自动插入文件头
function! SetTitle()
	"如果文件类型为.sh文件
	if &filetype == 'sh'
		call setline(1,"\#########################################################################")
		call append(line("."), "\# File Name: ".expand("%"))
		call append(line(".")+1, "\# Author: zhu wei")
		call append(line(".")+2, "\# Mail  : zhu_wei2@hoperun.com")
		call append(line(".")+3, "\# Created Time: ".strftime("%c"))
		call append(line(".")+4, "\#########################################################################")
		call append(line(".")+5, "\#!/bin/bash")
		call append(line(".")+6, "")
	else
		call setline(1, "/*************************************************************************")
		call append(line("."), "* File Name: ".expand("%"))
		call append(line(".")+1, "* Author: zhu wei")
		call append(line(".")+2, "* Mail  : zhu_wei2@hoperun.com")
		call append(line(".")+3, "* Created Time: ".strftime("%c"))
		call append(line(".")+4, "************************************************************************/")
		call append(line(".")+5, "")
	endif
	if &filetype == 'cpp'
		call append(line(".")+6, "#include<iostream>")
		call append(line(".")+7, "using namespace std;")
		call append(line(".")+8, "")
	endif
	if &filetype == 'c'
		call append(line(".")+6, "#include<stdio.h>")
		call append(line(".")+7, "")
	endif
	" 新建文件后，自动定位到文件末尾
	autocmd BufNewFile * normal * G
endfunc
"}}}
"{{{ ++ 按F5编译运行

:set makeprg=g++\ -Wall\ \ % "make 运行
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
	exec "w"
	if &filetype == 'c'
		exec "!g++ % -o %<"
		exec "! ./%<"
	elseif &filetype == 'cpp'
		exec "!g++ % -o %<"
		exec "! ./%<"
	elseif &filetype == 'java'
		exec "!javac %"
		exec "!java %<"
	elseif &filetype == 'sh'
		:!./%
	endif
endfunc
"C,C++的调试
map <F8> :call Rungdb()<CR>
func! Rungdb()
	exec "w"
	exec "!g++ % -g -o %<"
	exec "!gdb ./%<"
endfunc
"}}}
"{{{
function! AutoLoadCTagsAndCScope()
    let b:current_directory = getcwd()
    let b:position_of_divider = 0
	unlet! b:tags_find
	unlet! b:cscope_find
    while exists("b:current_directory")
        "search at current directory
        if isdirectory(b:current_directory)
            if !exists("b:cscope_find") && filereadable(b:current_directory . '/cscope.out')
		echo b:current_directory
				let show = execute 'cs show'
				echo show
                execute 'cs add ' . b:current_directory . '/cscope.out'
				echo  'cs add ' . b:current_directory . '/cscope.out'
                execute 'lcd ' . b:current_directory
                let b:cscope_find = 1
            endif
            if !exists("b:tags_find") && filereadable(b:current_directory . '/tags')
                execute 'set tags =' . b:current_directory . '/tags'
                execute 'lcd ' . b:current_directory
				echo  'set tags =' . b:current_directory . '/tags'
                let b:tags_find = 1
            endif
            if exists("b:tags_find") && exists("b:cscope_find")
                break
            endif
        endif

        " search at subdirectory
        " use regular-expression to get the position of the last divider('/')
        if exists("b:position_of_divider")
            let b:position_of_divider = match(b:current_directory,'/[^/]\{-}$',0)
            if(b:position_of_divider > 0)
                let b:current_directory = strpart(b:current_directory,0,b:position_of_divider)
            else
                "try find tags at $HOME at last but not root
                let b:current_directory = $HOME
				unlet! b:position_of_divider
            endif
        else
			unlet! b:current_directory
        endif

    endwhile
endf
"nmap <F7> :call AutoLoadCTagsAndCScope()<CR>
autocmd FileType h call AutoLoadCTagsAndCScope()
autocmd FileType c call AutoLoadCTagsAndCScope()
autocmd FileType cpp call AutoLoadCTagsAndCScope()
autocmd FileType java call AutoLoadCTagsAndCScope()
"}}}
